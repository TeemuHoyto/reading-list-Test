{"version":3,"sources":["Components/BooksToDisplay.js","Components/BookAPICall.js","Components/GetReadingList.js","Components/Suggestions.js","Components/App.js","serviceWorker.js","index.js"],"names":["BooksToDisplay","props","state","key","read_author_name","read_cover_i","read_id_goodreads","read_isbn","read_title","read_subject","read_read","bookAdded","uniqueId","enableUniqueIds","handleButtonAndItsFunctioncall","bind","console","log","this","id","title","img","goodreads","isbn","subject","readingLink","author_name","setState","setTimeout","newRead","axios","post","then","res","data","link","href","target","className","src","alt","substring","onClick","Component","BookAPICall","find","searchTerm","authorB00k","search","url","fetch","result","json","bookData","docs","isLoaded","error","toSearch","handleChange","handleChangeCheckBox","event","value","type","checked","name","length","message","placeHolder","label1","htmlFor","author","onChange","placeholder","map","item","cover_i","nextUniqueId","id_goodreads","GetReadingList","IncrementItem","offset","page","searchGET","suggestions","DecrementItem","toLowerCase","get","response","Getsuggestions","notYte","div","catch","works","handleDelete","index","readingList","findIndex","list","_id","books","Object","assign","splice","bookDeleted2","URL","delete","bookAdded2","cover_id","authors","push","undefined","replace","handleStateOfdiv","handleButtonAndItsFunction","master","Suggestions","getReadingList","getSubjects","subjectData","App","click","ButtonPress","prevState","classsNameOfNavbar","rel","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac0729cb.chunk.js","sourcesContent":["\r\nimport React, { Component }  from 'react'\r\nimport axios from 'axios'\r\nimport uniqueId from 'react-html-id';\r\nimport '../Css/BookToDisplay.css';\r\nclass BooksToDisplay extends Component  {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            key:'',\r\n            read_author_name: '',\r\n            read_cover_i: '',\r\n            read_id_goodreads: '',\r\n            read_isbn: '',\r\n            read_title:'',\r\n            read_subject:'',\r\n            read_read:'',\r\n            bookAdded:'invisible',\r\n\r\n        }\r\n        uniqueId.enableUniqueIds(this)\r\n        this.handleButtonAndItsFunctioncall = this.handleButtonAndItsFunctioncall.bind(this)\r\n    }\r\n    handleButtonAndItsFunctioncall(props){\r\n        console.log(`Form submitted:`);\r\n        console.log(`Book key: ${this.props.id}`);\r\n        console.log(`Book title: ${this.props.title}`);\r\n        console.log(`Book Cover number: ${this.props.img}`);\r\n        console.log(`Book goodreads id: ${this.props.goodreads}`);\r\n        console.log(`Book isbn: ${this.props.isbn}`);\r\n        console.log(`Book subject: ${this.props.subject}`);\r\n        console.log(`Book readingLink: ${this.props.readingLink}`);\r\n        console.log(`Book author name: ${ this.props.author_name}`);\r\n        \r\n        this.setState({\r\n            read_author_name: this.props.author_name,\r\n            read_cover_i: this.props.img,\r\n            read_id_goodreads: this.props.goodreads,\r\n            read_isbn: this.props.isbn,\r\n            read_title:this.props.title,\r\n            read_subject:this.props.subject,\r\n            read_read:this.props.readingLink,\r\n            key:this.props.id,\r\n            bookAdded:\"bookAdded\",\r\n        \r\n        })\r\n        setTimeout(() => {\r\n            const newRead = {\r\n                read_author_name: this.state.read_author_name[0],\r\n                read_cover_i: this.state.read_cover_i,\r\n                read_id_goodreads: this.state.read_id_goodreads,\r\n                read_isbn: this.state.read_isbn,\r\n                read_title: this.state.read_title, \r\n                read_subject: this.state.read_subject,\r\n                read_read: this.state.read_read,\r\n                key : this.state.key \r\n            };\r\n           // console.log(newRead)\r\n            axios.post('http://localhost:4000/reads/add', newRead)\r\n            .then(res => console.log(res.data));\r\n            this.setState({\r\n                read_author_name: '',\r\n                read_cover_i: '',\r\n                read_id_goodreads: '',\r\n                read_isbn: '',\r\n                read_title: '',\r\n                read_subject:'',\r\n                read_read:'',\r\n                bookAdded:\"invisible\",\r\n                key : ''\r\n             } )\r\n        }, 1000);\r\n    \r\n        \r\n        \r\n    }\r\n    render(props){\r\n  let link = (this.props.goodreads === '404'\r\n    ? console.log('Goodreads does not know of this title')\r\n    :\r\n    <div>\r\n    <h2>Link:  </h2> <h3> <a href= { this.props.goodreads} target=\"blank\">To Goodreads</a></h3>\r\n    </div>)\r\n  \r\n  return (\r\n    <div className=\"bookstodisplayDiv\">\r\n       <div className={this.state.bookAdded}>\r\n            <h1>Book succesfully added to reading list</h1>\r\n        </div>\r\n      <img src={this.props.img} alt='cover' className=\"CovrImage\"></img>\r\n      <div className=\"textnextToImg\">\r\n        <h2>Title: </h2>\r\n        <h3> { this.props.title.substring(0, 35)}</h3>\r\n        <br></br>\r\n        <h2>Author: </h2>\r\n        <h3> { this.props.author_name}</h3>\r\n        <br></br>\r\n        \r\n{link}\r\n<button onClick={this.handleButtonAndItsFunctioncall} className=\"prettyButton\">Add to reading list</button>\r\n      </div>\r\n     \r\n    </div>\r\n  )\r\n    }\r\n}\r\nexport default BooksToDisplay","import React, {\r\n    Component\r\n} from 'react';\r\nimport BooksToDisplay from './BooksToDisplay.js'\r\nimport '../Css/BookAPICall.css';\r\nimport uniqueId from 'react-html-id';\r\n\r\nlet Togoodreads = 'https://www.goodreads.com/book/show/'\r\nlet coverImage = 'http://covers.openlibrary.org/b/id/'\r\n\r\nclass BookAPICall extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null,\r\n            bookData: null,\r\n            toSearch: \"\",\r\n            isLoaded: false,\r\n            searchTerm:\"\",\r\n            search:false,\r\n           \r\n        }\r\n        uniqueId.enableUniqueIds(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleChangeCheckBox = this.handleChangeCheckBox.bind(this)\r\n    }\r\n    \r\n    handleChange(event){\r\n        const target = event.target\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name\r\n        this.setState({\r\n            [name]:value,\r\n            \r\n        })\r\n       \r\n        \r\n        \r\n    setTimeout(() => {\r\n        if(value.length>=5){\r\n            this.find(value)\r\n           }\r\n    },1000);    \r\n        \r\n}\r\nhandleChangeCheckBox(event){\r\n    const target = event.target\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name\r\n    this.setState({\r\n        [name]:value,\r\n        toSearch: \"\",\r\n\r\n    })}\r\n        find = searchTerm => {\r\n            let authorB00k= this.state.search ? 'title' : 'author'\r\n        const url = `http://openlibrary.org/search.json?${authorB00k}=${searchTerm}`\r\n     \r\n     fetch(url )\r\n     \r\n    .then(result => result.json())\r\n    .then(data =>{\r\n  //      console.log(url)\r\n        this.setState({bookData: data.docs,\r\n            isLoaded: true })\r\n    })\r\n   \r\n      }\r\n\r\n   componentDidMount() {\r\n  this.find(this.state.searchTerm)\r\n  \r\n  if(this.state.toSearch.length<=5){\r\n    this.setState({\r\n        bookData: null\r\n    })\r\n}\r\n    }      \r\n   \r\n\r\n    render() {\r\n     console.log(this.state.bookData)\r\n\r\n        const { error, isLoaded } = this.state;\r\n        if (error) {\r\n          return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n          \r\n          \r\n           let placeHolder = this.state.search ?\"Search for a book title\"  : \"Search for an Author\"\r\n           let label1 = this.state.search ?'Alter your search to Authors' :  'Alter your search to books' \r\n\r\n         \r\n        //   console.log(placeHolder)\r\n        return (\r\n           <div>\r\n               <div className=\"buttonNning\">\r\n               \r\n               <label htmlFor=\"author\" id=\"label\" className=\"container2\">{label1}\r\n            <div className=\"container\">\r\n                  <input \r\n                name = 'search'\r\n                type = \"checkbox\"\r\n                id=\"author\"\r\n                \r\n                checked = {this.state.author}\r\n                onChange = {this.handleChangeCheckBox}\r\n                />\r\n               <span className=\"checkmark\"></span>\r\n               </div>\r\n               </label>\r\n               </div>\r\n               <input \r\n                name = \"toSearch\"\r\n                type = \"text\"\r\n               \r\n                placeholder = {placeHolder}\r\n                className=\"Searchterms\"\r\n                value = {this.state.toSearch}\r\n                onChange = {this.handleChange}\r\n                \r\n                />\r\n                \r\n                <div className=\"columnCount\">\r\n            { this.state.bookData.map(item => (\r\n\r\n          item.cover_i ? \r\n          // <ul className=\"BooksToDisplay\">\r\n              <BooksToDisplay  id={this.nextUniqueId()} title={item.title} author_name={item.author_name}\r\n                isbn={ item.isbn  ?item.isbn[0] : 'No ISBN'}\r\n               subject = {item.subject ? item.subject[0]:'No Subject'}\r\n               goodreads={ item.id_goodreads ? Togoodreads + item.id_goodreads[0] : '404'}\r\n               readingLink = {item.key? item.key:null}\r\n               img={  item.cover_i ? coverImage +item.cover_i +'-L.jpg': null } />\r\n               \r\n          //  </ul>\r\n           :null\r\n           ))}\r\n            </div>\r\n        \r\n                </div>\r\n        )\r\n    }\r\n    }\r\n}\r\n\r\nexport default BookAPICall","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport '../Css/GetReadingList.css';\r\n\r\nlet openlibrary = 'https://openlibrary.org'\r\nlet coverImage = 'http://covers.openlibrary.org/b/id/'\r\n\r\nclass GetReadingList extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            bookData: null,\r\n            isLoaded: false,\r\n            readingList: [],\r\n            key:'',\r\n            read_author_name: '',\r\n            read_cover_i: '',\r\n            read_id_goodreads: '',\r\n            read_isbn: '',\r\n            read_title:'',\r\n            read_subject:'',\r\n            read_read:'',\r\n            search:'',\r\n            notYte:false,\r\n            suggestions:'',\r\n            Getsuggestions:[],\r\n            bookDeleted2:'invisible',\r\n            div:\"invisible\",\r\n            bookAdded2:'invisible',\r\n            offset:1,\r\n            page:1\r\n        }\r\n     \r\n    }\r\n    \r\n    IncrementItem = () => {\r\n        this.setState({ offset: this.state.offset + 12 ,\r\n            page: this.state.page + 1});\r\n        this.searchGET(this.state.suggestions)\r\n    console.log(this.state.offset)  \r\n    }\r\n      DecrementItem = () => {\r\n        this.setState({ offset: this.state.offset - 12,\r\n            page: this.state.page - 1 });\r\n        this.searchGET(this.state.suggestions)\r\n      }\r\n     \r\n\r\n\r\n    handleStateOfdiv(){\r\n        this.setState({\r\n            div:\"invisible\",\r\n            offset:1,\r\n            page:1\r\n        })\r\n    }\r\n\r\n    handleButtonAndItsFunction(item){\r\n        console.log(`Form submitted:`);\r\n        console.log(`Book key: ${item.key}`);\r\n        console.log(`Book title: ${item.title}`);\r\n        console.log(`Book Cover number: ${ coverImage+item.cover_id+'-L.jpg'}`);\r\n        console.log(`Book subject: ${item.subject}`);\r\n        console.log(`Book readingLink: ${item.key}`);\r\n        console.log(`Book author name: ${item.authors[0].name}`);\r\n        \r\n        this.setState({\r\n            read_author_name: item.authors[0].name,\r\n            read_cover_i:coverImage+item.cover_id+'-L.jpg',\r\n            read_title:item.title,\r\n            read_subject:item.subject,\r\n            read_read:item.key,\r\n            key:item.key,\r\n            bookAdded2:\"bookAdded2\",\r\n            \r\n        })\r\n        \r\n        setTimeout(() => {\r\n            const newRead = {\r\n                read_author_name:this.state.read_author_name,\r\n                read_cover_i: this.state.read_cover_i,\r\n                read_title: this.state.read_title, \r\n                read_subject: this.state.read_subject[0],\r\n                read_read: this.state.read_read,\r\n                key: this.state.key \r\n            };\r\n            const books = Object.assign([], this.state.readingList);\r\n        books.push(newRead);\r\n            console.log(newRead)\r\n            axios.post('http://localhost:4000/reads/add', newRead)\r\n            .then(res => console.log(res.data));\r\n            this.setState({\r\n                readingList:books,\r\n                read_author_name: '',\r\n                read_cover_i: '',\r\n                read_id_goodreads: '',\r\n                read_isbn: '',\r\n                read_title: '',\r\n                read_subject:'',\r\n                read_read:'',\r\n               \r\n                key : ''\r\n             } )\r\n             setTimeout(() => {\r\n                 this.setState({\r\n                    bookAdded2:\"invisible\",\r\n                 })\r\n             }, 1000);\r\n        }, 100);\r\n    \r\n        \r\n        \r\n    }\r\n\r\n    searchGET(subject){\r\n     \r\n        setTimeout(() => {\r\n          if(subject===undefined){\r\n            console.log('not yet')\r\n        \r\n          }else{\r\n            console.log('wohuu')\r\n          this.setState({\r\n            suggestions:subject.replace(/ /g,\"_\"),\r\n            notYte:false,\r\n            Getsuggestions:[],\r\n\r\n          })\r\n          console.log(this.state.suggestions)\r\n          setTimeout(() => {\r\n            \r\n                this.find(this.state.suggestions)\r\n               \r\n        },100);    \r\n        \r\n        \r\n             \r\n            }}, 100);}\r\n            find = subject => {\r\n              \r\n         setTimeout(() => {\r\n          let url ='http://openlibrary.org/subjects/'+this.state.suggestions.toLowerCase()+'.json?offset='+this.state.offset\r\n          axios.get(url)\r\n                  .then(response => {\r\n                      this.setState({ Getsuggestions: response.data,\r\n                        notYte:true,\r\n                        div:\"visibleDIVBOOK\",\r\n                      });\r\n                  })\r\n                  .catch(function (error){\r\n                      console.log(error);\r\n                  })\r\n                  setTimeout(() => {\r\n                   console.log(this.state.Getsuggestions)\r\n             \r\n        console.log(this.state.Getsuggestions.works)\r\n        console.log(url)\r\n\r\n    }, 2000);\r\n              \r\n        }, 100);\r\n                   \r\n            }\r\n\r\n\r\n      handleDelete = (key) => {\r\n        const index = this.state.readingList.findIndex((list)=> {\r\n            this.setState({key:list._id})\r\n            return (list.key === key);\r\n           \r\n        })\r\n           const books = Object.assign([], this.state.readingList);\r\n           books.splice(index,1);\r\n           console.log(books)\r\n    this.setState({readingList:books,\r\n        bookDeleted2:'bookDeleted2',\r\n      //  key:this.state.readinglist._id,\r\n        });\r\n        \r\n        setTimeout(() => {\r\n             const URL = \r\n              'http://localhost:4000/reads/delete-read/'+this.state.key\r\n          \r\n             \r\n         \r\n      axios.delete(URL)\r\n      .then((res) => {\r\n          console.log('Book successfully deleted!')\r\n      }).catch((error) => {\r\n          console.log(error)\r\n      })  \r\n      this.setState({\r\n        bookDeleted2:'invisible',\r\n          key:null\r\n      })\r\n      }, 1000)\r\n      \r\n     }\r\n      \r\n\r\n     \r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/reads/')\r\n            .then(response => {\r\n                this.setState({ readingList: response.data,\r\n                    isLoaded:true \r\n                });\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            })\r\n            setTimeout(() => {\r\n             console.log(this.state.readingList)\r\n     \r\n            }, 100);\r\n                       \r\n      \r\n        }        \r\n\r\n       \r\n    render(){\r\n        const { error, isLoaded } = this.state;\r\n        if (error) {\r\n          return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n           // console.log(this.state.readingList)\r\n    return(\r\n        \r\n        <div className=\"columncountGRL\">\r\n        { this.state.readingList.map((item) => (\r\n            \r\n              <div className=\"bookstodisplayDivG\" key={item.key}>\r\n       \r\n              \r\n              <div className=\"textnextToImgGet\">\r\n              <img  src={item.read_cover_i} alt='cover' className=\"CovrImageGet\"></img>\r\n               <div className=\"textOnImage\"> \r\n\r\n                {item.read_read?\r\n                             <h2><a href={openlibrary+item.read_read} target=\"blank\" className=\"Getsuggup\">Read <br/> {item.read_title.substring(0, 40)}</a></h2>:<h2>{item.read_title.substring(0, 40)}</h2>}\r\n\r\n                <br></br><br></br>\r\n                <h2>BY </h2>\r\n                <br></br>\r\n                <h2> { item.read_author_name}</h2>\r\n                <br></br>\r\n        <button onClick={this.handleDelete.bind(this, item.key)} className=\"prettyButtonGET\">X</button>\r\n        <button onClick={this.searchGET.bind(this, item.read_subject)} className=\"Getsugg\"> {'More '+ item.read_subject.substring(0, 20)\r\n  }</button>\r\n              </div>\r\n              <div className={this.state.bookDeleted2}>\r\n            <h1>Book succesfully deleted</h1>\r\n        </div>\r\n        \r\n        </div>\r\n            </div>\r\n        ))}\r\n         <br></br>\r\n         <br></br>\r\n         <br></br>\r\n         <br></br>\r\n         <br></br>\r\n<div className={this.state.div}>\r\n    <h2 className=\"suggestionsToTitle\">{this.state.suggestions.replace(/_/g,\" \")+ ' ' +this.state.page}</h2>\r\n    { (this.state.offset >12) ?[<button onClick={this.DecrementItem.bind(this)} className=\"prettyButtonGETUPLess\">Less Books</button>, <button onClick={this.IncrementItem.bind(this)} className=\"prettyButtonGETUPMore\">More Books</button>]\r\n:<button onClick={this.IncrementItem.bind(this)} className=\"prettyButtonGETUPMore\">More Books</button>}\r\n\r\n  \r\n  \r\n    <button onClick={this.handleStateOfdiv.bind(this)} className=\"ButtonToreturnYuBackToyourList\">X</button>\r\n        {this.searchGET(this.props.item)}\r\n    {this.state.notYte ===true ?\r\n              \r\n\r\n      this.state.Getsuggestions.works.map(item => {\r\n                         \r\n                         return  <div className=\"textnextToImgGetUP\" key={item.key}>\r\n                             \r\n                          { item.cover_id ? <img  src={ coverImage+item.cover_id+'-L.jpg'}  alt='cover' className=\"CovrImageGetUP\"></img>: null} \r\n                           \r\n                            <div className=\"textOnImage\"> \r\n                            {item.key?\r\n                             <h2><a href={openlibrary+item.key} target=\"blank\" className=\"Getsuggup\">Read <br/> {item.title.substring(0, 40)}</a></h2>:item.title.substring(0, 40)}\r\n                            <br></br><br></br>\r\n                <h2>BY </h2>\r\n                             <br></br><br></br>\r\n                             <h2> { item.authors[0] ? item.authors[0].name:'No Author'}</h2>\r\n                             <br></br>\r\n                            \r\n                             \r\n                             <button onClick={this.handleButtonAndItsFunction.bind(this, item)} className=\"prettyButtonGETUP\">Add to reading list</button>\r\n                             <button onClick={this.searchGET.bind(this, item.subject[0])} className=\"Getsugg\"> {'More '+ item.subject[0]\r\n  }</button>\r\n                             \r\n \r\n                           </div>\r\n                         </div>\r\n                    \r\n               }) :null}\r\n                       </div>\r\n                       <div className={this.state.bookAdded2}>\r\n            <h1>Book succesfully added to reading list</h1>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n }\r\n}\r\n}\r\n export default GetReadingList;","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport '../Css/Suggestions.css';\r\nlet master = []\r\n\r\nclass Suggestions extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            getReadingList : [],\r\n            error: null,\r\n            getSubjects : [],\r\n            isLoaded:false,\r\n            subjectData:'',\r\n           \r\n        }\r\n\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n        this.setState({ \r\n            getReadingList: [],\r\n            getSubjects : [],\r\n        });\r\n        master = []\r\n        axios.get('http://localhost:4000/reads/')\r\n            .then(response => {\r\n                this.setState({ getReadingList: response.data,\r\n                    isLoaded:true \r\n                });\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            })\r\n            setTimeout(() => {\r\n                \r\n                this.state.getReadingList.map(item => (\r\n                    item.read_subject ? master.push(item.read_cover_i): console.log('no subject') ))\r\n                    this.setState({getSubjects:master})\r\n                    console.log(this.state.getSubjects);\r\n            }, 1000);\r\n        }\r\n       \r\n    render(){\r\n        \r\n        const { error, isLoaded } = this.state;\r\n        if (error) {\r\n          return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n            \r\n        return(\r\n            \r\n            <div className=\"BGIMAGE\">\r\n<h1 className=\"titleOfMyApp\">Create your own reading list</h1>\r\n\r\n\r\n      {this.state.getSubjects.map((value, index) => {\r\n        return <div><img src={value}alt='cover' className=\"images\"></img></div>\r\n        \r\n      })}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n}\r\n\r\nexport default Suggestions;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport '../Css/App.css';\nimport BookAPICall from './BookAPICall.js' \nimport GetReadingList from \"./GetReadingList.js\";\nimport Suggestions from \"./Suggestions.js\";\n\n\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n    click:true\n        }\n        this.ButtonPress = this.ButtonPress.bind(this)\n\n    }\n    \n\n    ButtonPress(){\n        this.setState(prevState => ({\n            click: !prevState.click\n          }));\n    \nconsole.log(this.state.click)\n    }\n  render() {\n      let  classsNameOfNavbar = this.state.click ? 'navbar' : 'navbar1'\n\n    return (\n        <div>\n            <button onClick={this.ButtonPress} className=\"hamburgerMenu\"> &#9776;</button>\n      <Router>\n<div className=\"nav-container\">\n          <nav className={classsNameOfNavbar}>\n            <a className=\"navbar-brand\" href=\"http://localhost:3000.com\" target=\"_blank\"  rel=\"noopener noreferrer\">\n            \n            </a>\n            <Link to=\"/\" className=\"navbar-brand\"></Link>\n            <div className=\"test\">\n              <ul className=\"nav\">\n                <li className=\"navbar-item\">\n                <Link to=\"Home/\" className=\"nav-link\">Home</Link>\n                </li>\n                <li className=\"navbar-item\">\n                <Link to=\"/Search\" className=\"nav-link\">Search</Link>\n                </li>\n                <li className=\"navbar-item\">\n                <Link to=\"/ReadingList\" className=\"nav-link\">Reading list</Link>\n                </li>\n              \n              </ul>\n            </div>\n          </nav>\n          <br/>\n\n        \n          <Route path=\"/Home/\" component={Suggestions} />  \n          <Route path=\"/Search/\" component={BookAPICall} />    \n<Route path=\"/ReadingList/\" component={GetReadingList} />\n\n\n\n\n         \n        </div>\n      </Router>\n   \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Css/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}